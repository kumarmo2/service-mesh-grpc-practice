# NOTE: to manually create/configure envoy to work as an apiGateway is possible but will need
# many escape hatches but is really very cumbersome. use `consul ingress gateways` for this.

node:
  cluster: ENVOY_XDS_CLUSTER
  id: sdsaf

# admin web panel
admin:
  access_log_path: ./admin_logs
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9902

static_resources:
  listeners:
    - name: grpc-listener
      address:
        socket_address:
          protocol: TCP
          address: 0.0.0.0
          port_value: 8000
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: grpc-filter
                http_filters:
                  - name: envoy.filters.http.router
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: ./access_logs
                route_config:
                  name: grpc-filter-router
                  virtual_hosts:
                    - name: catch-all-grpc-host
                      domains:
                        - "*"
                      routes:
                        - name: some-route
                          match:
                            prefix: "/"
                            # match the content-type header to allow only grpc requests.
                            headers:
                              - name: content-type
                                exact_match: application/grpc
                          route:
                            cluster: hello-service

  clusters:
    - name: hello-service
      connect_timeout: 0.25s
      lb_policy: ROUND_ROBIN
      type: EDS
      eds_cluster_config:
        service_name: hello-service
        eds_config:
          resource_api_version: V3
          ads: {}
          # api_config_source:
          #   api_type: GRPC
          #   transport_api_version: V3
          #   grpc_services:
          #     - envoy_grpc:
          #         cluster_name: xds-cluster

    - name: xds-cluster
      type: strict_dns
      connect_timeout: 2s

      http2_protocol_options: {}
      upstream_connection_options:
        # this is required so that the connection is kept alive with the management server
        tcp_keepalive: {}

      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: xds-cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: host.docker.internal
                      port_value: 8502
dynamic_resources:
  # cds_config:
  #   resource_api_version: V3
  #   ads: {}

  ads_config:
    api_type: delta_grpc
    transport_api_version: v3
    grpc_services:
      - envoy_grpc:
          cluster_name: xds-cluster
